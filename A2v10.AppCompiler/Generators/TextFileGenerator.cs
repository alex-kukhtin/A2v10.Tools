// Copyright © 2022-2023 Oleksandr Kukhtin. All rights reserved.

using System;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using Microsoft.CodeAnalysis.Text;

namespace A2v10.AppCompiler;
internal class TextFileGenerator
{
    public static SourceText GetSource(String path, String nspace, String[] filter)
    {
        var sb = new StringBuilder(HEADER);
        sb.Replace("$(Namespace)", nspace);
        var sbDict = new StringBuilder();
        var sbBody = new StringBuilder();
        foreach (var file in DirectoryHelper.EnumerateFilesMult(path, filter))
        {
            var fi = DirectoryHelper.GetFileInfo(file, path);
            sbDict.AppendLine(MapEntry(fi));
            sbBody.AppendLine(MapBody(fi));
        };
        sb.AppendLine(sbDict.ToString());
        sb.AppendLine("};");

        sb.AppendLine(sbBody.ToString());
        sb.AppendLine("}"); // end class;
        return SourceText.From(sb.ToString(), Encoding.UTF8);
    }

    static String MapEntry(ElementInfo file)
    {
        return $"[\"{file.RelativePath}\"] = {file.Identifier},";
    }

    static String PackText(String text)
    {
        text = Regex.Replace(text, @"\r|\n", String.Empty);
        // ts tabs -> one space
        return Regex.Replace(text, @"\t|\s\s\s\s", " ");
    }
    static String MapBody(ElementInfo file)
    {
        var text = File.ReadAllText(file.FullPath);
        String statement = "null";
        if (!String.IsNullOrEmpty(text))
        {
            var ext = Path.GetExtension(file.FullPath);
            if (ext != ".txt")
                text = PackText(text);
            statement = Encoder.EncodeBytes(text);
        }
        return $"static byte[] {file.Identifier}() {{ return {statement}; }}";
    }

    private const String HEADER = @"
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a A2v10.App.Compiler.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

/* Copyright © 2022-2023 Oleksandr Kukhtin. All rights reserved.*/

using System;
using System.IO;
using System.Collections.Generic;

using A2v10.Module.Infrastructure.Impl;

namespace $(Namespace);

public class TextFilesContainer 
{
	public String Get(String path) {
		if (_textMap.TryGetValue(path, out var textFile))
			return DecodeHelpers.Decode(textFile());
		return null;
	}

	public Stream GetStream(String path) {
		if (_textMap.TryGetValue(path, out var textFile))
			return DecodeHelpers.DecodeStream(textFile());
		return null;
	}

	public IEnumerable<String> EnumerateFiles(String path, String searchPattern)
	{
		foreach (var k in _textMap.Keys) {
			if ((path == null || k.StartsWith(path)) && k.EndsWith(searchPattern))
				yield return k;
		}
	}

	public Boolean Exists(String path)
	{
		return _textMap.ContainsKey(path);
	}

	private readonly Dictionary<String, Func<byte[]>> _textMap = new()
	{
";
}
